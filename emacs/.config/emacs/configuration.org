#+title: Emacs Configuration
#+options: toc:nil num:nil

* Basics
** Minimal Look
   Remove all clutter from the screen, i.e. tool bar, menu bar, scroll bar, and
   startup screen.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (add-to-list 'default-frame-alist
                  '(vertical-scroll-bars . nil))
     (setq inhibit-startup-screen 1)
   #+END_SRC

** Fonts
   Only mono space fonts, there is a whole lot of stuff to discover here.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'default-frame-alist
                  '(font . "SF Mono 16"))
   #+END_SRC

** Other quality life improvements
   Things done here:
   - Tell Emacs not to create backup files (it is annoying)
   - Highlight current line (cursor line)
   - Display the column number in Emacs mode line.

   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (global-hl-line-mode t)
     (column-number-mode 1)
   #+END_SRC

* Package manager
** =use-package=
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives
                 '("melpa" . "https://melpa.org/packages/") t)
    (require 'use-package)
  #+END_SRC

** =straight.el=
  #+BEGIN_SRC emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 6))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+END_SRC

* Packages
** Evil mode
   evil: Extensive vim emulation, provides vim keys and modes (you can't live
   without it).

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :config
       (evil-mode 1))
   #+END_SRC

** Color schemes
   Doom has a collection of themes to use and Modus has just two, light and dark
   and they are the best in Emacs world.

   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :ensure t
       :config
       (setq doom-themes-enable-bold t
	     doom-themes-enable-italic t)
       (doom-themes-visual-bell-config)
       (doom-themes-org-config))

     (use-package modus-themes
       :ensure t
       :config
       (setq modus-themes-italic-constructs t
	     modus-themes-bold-constructs t))
   #+END_SRC

*** Set color scheme
   #+BEGIN_SRC emacs-lisp
     (load-theme 'modus-operandi :no-confirm)
   #+END_SRC

** Org roam
   Knowledge management tool that brings the best of Roam research into org mode
   of emacs. Also see [[https://en.wikipedia.org/wiki/Zettelkasten][Zettelkasten]]

   #+BEGIN_SRC emacs-lisp
     (use-package org-roam
       :ensure t
       :custom
       (org-roam-directory (file-truename "~/Documents/Zettelkasten/"))
       :bind (("C-c n c" . org-roam-capture)
              ("C-c n f" . org-roam-node-find)
              ("C-c n i" . org-roam-node-insert))
       :config
       (define-key minibuffer-local-completion-map (kbd "SPC") 'self-insert-command)
       (org-roam-db-autosync-mode)
       (setq org-roam-node-display-template
             (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag))))
   #+END_SRC

** Org roam ui
   Roam research has a good feature where it shows the connections between
   individual notes as a graph with all notes as nodes and connections as edges,
   this plugin brings this feature to emacs org roam ecosystem.

   #+BEGIN_SRC emacs-lisp
     (use-package org-roam-ui
       :ensure t
       :after org-roam)
   #+END_SRC

** Org appear
   When =*=, =/= are hidden in org mode by using =org-hide-emphasis-marker= they remain
   hidden no matter what, this plugin makes them to appear when the cursor is
   above the =*=, =/= character.

   #+BEGIN_SRC emacs-lisp
     (use-package org-appear
       :ensure t
       :hook (org-mode . org-appear-mode))
   #+END_SRC

** Org bullets
   The default org mode shows the headings as just asterisks for how many levels
   deep you have them, this plugin shows a really nice glyph instead of
   asterisks, for four different levels and then repeats them.

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook
         (lambda ()
           (org-bullets-mode 1))))
   #+END_SRC

** Vertico
   This plugin provides a nice UI to select, think of this as telescope for
   emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package vertico
       :ensure t
       :init
       (vertico-mode))
   #+END_SRC

** Orderless
   Fuzzy search for everything that is searchable within emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package orderless
       :ensure t
       :init
       (setq completion-styles '(orderless substring basic)
             completion-ignore-case t))
   #+END_SRC

** Nano-emacs
   Sort of a distribution of emacs which has good UI; also we could pick and
   choose only parts of it we need, this is like mini.nvim from neovim world.

   #+BEGIN_SRC emacs-lisp
     (straight-use-package
       '(nano-emacs :type git :host github :repo "rougier/nano-emacs"))

     ;;(require 'nano)
     (require 'nano-faces)
     (require 'nano-modeline)
     (require 'nano-layout)
   #+END_SRC

* Misc
** Wrap at 80 column
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
       (lambda ()
         (auto-fill-mode 1)))
     (setq-default fill-column 80)
   #+END_SRC

** Spell check
   =ispell= is a program that emacs depend on for spell checking, so installed it
   with =brew=. Installing it was not enough as emacs was not able to find the
   executable in =$PATH= and hence had to explicitly mention the path of =ispell=.

   Then enabling spell checking; which in emacs is a mode called =flyspell-mode=;
   for org mode.

   #+BEGIN_SRC emacs-lisp
     (setq ispell-program-name "/opt/homebrew/bin/ispell")
     (dolist (hook '(org-mode-hook))
       (add-hook hook
         (lambda ()
           (flyspell-mode 1))))
   #+END_SRC

** Org mode
   A few improvements for org mode.

   #+BEGIN_SRC emacs-lisp
     (setq org-hide-emphasis-markers t
           org-pretty-entities t
           org-src-fontify-natively t
           org-startup-folded t
           org-hide-block-startup 1)
   #+END_SRC

** Minimal look
   Package =nano-emacs= messes this up and so had to write these again.

   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode 0)
     (tool-bar-mode 0)
     (fringe-mode '(0 . 0))
     (scroll-bar-mode 0)
     (window-divider-mode 0)
     (setq-default mode-line-format nil)
     (set-face-attribute 'default nil :height 160)
   #+END_SRC

** Eye candy for Mac OS
   These things are just for Mac OS, these options make the UI more minimal by
   removing the title bar; it doesn't actually remove it but blends the title
   bar with the entire window and the theme also then applies to it; and not
   showing file name in title bar, which is default.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
     (add-to-list 'default-frame-alist '(ns-appearance . dark))
     (setq-default frame-title-format '(""))
   #+END_SRC

** Display \( \LaTeX \) fragments
   Emacs was unable to find the files required by \( \TeX \) to display the
   \(\LaTeX \) blocks as they will be displayed in PDF when rendered.

   And so firstly told where all the files live and then loaded the language
   with babel, which is the compiler kindda thing that takes any source program
   from org mode and runs it through the language compiler and outputs the
   result back into the org mode buffer.

   Finally making the rendered \( \LaTeX \) block of proper size as that of font.

   #+BEGIN_SRC emacs-lisp
     (setq exec-path (append exec-path '("/usr/local/texlive/2023basic/bin/universal-darwin")))

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((latex . t)))

     (plist-put org-format-latex-options :scale 1.5)
     (setq org-latex-image-default-width ".5")
   #+END_SRC
