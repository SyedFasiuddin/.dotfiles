call plug#begin()

Plug 'SirVer/ultisnips'
Plug 'lervag/vimtex'
    let g:tex_flavor = "latex"
    let g:vimtex_view_general_viewer='zathura'
    let g:vimtex_view_method='zathura'
    let g:vimtex_quickfix_mode=0
    " these two lines are for a separate plugin I use: https://github.com/KeitaNakamura/tex-conceal.vim
    set conceallevel=1
    let g:tex_conceal='abdmg'
 
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Plug 'itchyny/lightline.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'

call plug#end()

" set number
" set relativenumber

set visualbell
set noerrorbells

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab

set encoding=utf-8
set fileencoding=utf-8

set smartindent
set autoindent

set cursorline
set colorcolumn=80
set scrolloff=8

set nocompatible
" set backspace=2
set wildmode=longest,list,full
set pumheight=5         " this limits the popup to show 5 items
set complete+=k         " this tells vim to look up the dictionary words
set completeopt=menuone,longest
set shortmess+=c        " this tells not to show msg in bottom while selecting items from popup menu
set spell
set spelllang=en_us

set textwidth=80        " shorthand tw
set formatoptions+=t    " shorthand fo

" to change the cursor from block to bar in insert mode
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

set splitbelow
set splitright

set noshowmode
set noswapfile
set showcmd

set laststatus=2        " to display statusline 
set statusline=
set statusline+=\ %f    " relative file name
set statusline+=\ %M    " file modified or not
set statusline+=\%=     " right side separator
set statusline+=%{wordcount().words} " display no of words in curr buf
" set statusline+=\ %L    " total number of line in file
set statusline+=\ [%n]  " buffer number enclosed in brackets 
" set laststatus=2
" set statusline=
" set statusline+=%#NonText#

colorscheme slate
set background=dark
set termguicolors

let g:tex_flavor = "latex"

" ultisnips configuration
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

" limelight configurations
" let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
" let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'
let g:limelight_default_coefficient = 0.7

" goyo configurations
let g:goyo_width=80
let g:goyo_height="60%"

function! s:goyo_enter()
    if executable('tmux') && strlen($TMUX)
        silent !tmux set status off
    endif

    set noshowcmd
    set nocursorline
    set scrolloff=999
    Limelight
    hi! StatusLine guifg=#ffffff guibg=NONE
    hi! Normal ctermbg=NONE guibg=NONE
    hi! NonText ctermbg=NONE guibg=NONE ctermfg=NONE guifg=NONE
endfunction
                              
function! s:goyo_leave()
    if executable('tmux') && strlen($TMUX)
        silent !tmux set status on
    endif

    set showcmd
    set cursorline
    set scrolloff=8
    Limelight!
    hi! StatusLine guifg=#ffffff guibg=NONE
    hi! Normal ctermbg=NONE guibg=NONE
    hi! NonText ctermbg=NONE guibg=NONE ctermfg=NONE guifg=NONE
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" coc configurations
" inoremap <expr> > pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> < pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [d <Plug>(coc-diagnostic-prev)
nmap <silent> ]d <Plug>(coc-diagnostic-next)
" :h [d and :h ]d

" GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)

filetype on
filetype plugin on
filetype indent on

set encoding=utf-8

syntax enable

"""""""""""""""
""  Keymaps  ""
"""""""""""""""

noremap <space> <nop>
let mapleader=" "

" Pane navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Pane resize
noremap <A-h> :vertical resize +2<CR>
noremap <A-j> :resize +2<CR>
noremap <A-k> :resize -2<CR>  
noremap <A-l> :vertical resize -2<CR>

nnoremap <leader>s :source ~/.vim/vimrc<CR>
nnoremap <F2> :Goyo<CR>
inoremap <F2> <ESC>:Goyo<CR>a

" trying to not use these keys so removed their bindings
nnoremap Q          <nop> " enter ex mode
nnoremap <Up>       <nop>
nnoremap <Down>     <nop>
nnoremap <Left>     <nop>
nnoremap <Right>    <nop>

" ESC
inoremap jj <Esc>

hi! Normal ctermbg=NONE guibg=NONE
hi! NonText ctermbg=NONE guibg=NONE ctermfg=NONE guifg=NONE

hi! StatusLine guifg=#ffffff guibg=NONE

" the braces that are highlighted are due to this default vim plugin which is
" disabled using this line
let loaded_matchparen = 1

set path+=**
